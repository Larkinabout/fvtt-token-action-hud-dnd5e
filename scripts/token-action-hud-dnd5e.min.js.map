{"version":3,"file":"token-action-hud-dnd5e.min.js","sources":["constants.js","utils.js","action-handler.js","magic-items-extender.js","roll-handler.js","defaults.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\r\n * Module-based constants\r\n */\r\nexport const MODULE = {\r\n  ID: \"token-action-hud-dnd5e\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Core module\r\n */\r\nexport const CORE_MODULE = {\r\n  ID: \"token-action-hud-core\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Core module version required by the system module\r\n */\r\nexport const REQUIRED_CORE_MODULE_VERSION = \"2.0\";\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Action type\r\n */\r\nexport const ACTION_TYPE = {\r\n  ability: \"DND5E.Ability\",\r\n  check: \"tokenActionHud.dnd5e.check\",\r\n  condition: \"tokenActionHud.dnd5e.condition\",\r\n  counter: \"tokenActionHud.dnd5e.counter\",\r\n  effect: \"DND5E.Effect\",\r\n  exhaustion: \"DND5E.Exhaustion\",\r\n  feature: \"TYPES.Item.feat\",\r\n  item: \"tokenActionHud.dnd5e.item\",\r\n  save: \"DND5E.SAVE.Title.one\",\r\n  skill: \"tokenActionHud.dnd5e.skill\",\r\n  spell: \"TYPES.Item.spell\",\r\n  utility: \"DND5E.ActionUtil\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Activation types\r\n */\r\nexport const ACTIVATION_TYPE = {\r\n  action: { group: \"actions\" },\r\n  bonus: { group: \"bonus-actions\", icon: \"fas fa-plus\" },\r\n  crew: { group: \"crew-actions\", icon: \"fas fa-users\" },\r\n  day: { icon: \"fas fa-hourglass-end\" },\r\n  hour: { icon: \"fas fa-hourglass-half\" },\r\n  lair: { group: \"lair-actions\", icon: \"fas fa-home\" },\r\n  minute: { icon: \"fas fa-hourglass-start\" },\r\n  legendary: { group: \"legendary-actions\", icon: \"fas fas fa-dragon\" },\r\n  reaction: { group: \"reactions\", icon: \"fas fa-bolt\" },\r\n  reactiondamage: { group: \"reactions\", icon: \"fas fa-bolt\" },\r\n  reactionmanual: { group: \"reactions\", icon: \"fas fa-bolt\" },\r\n  special: { group: \"special-actions\", icon: \"fas fa-star\" },\r\n  other: { group: \"other-actions\" }\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Concentration icon\r\n */\r\nexport const CONCENTRATION_ICON = \"systems/dnd5e/icons/svg/statuses/concentrating.svg\";\r\n\r\n/* -------------------------------------------- */\r\n\r\nexport const CUSTOM_DND5E = {\r\n  ID: \"custom-dnd5e\",\r\n  COUNTERS: {\r\n    character: \"character-counters\",\r\n    group: \"group-counters\",\r\n    npc: \"npc-counters\"\r\n  }\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Feature Group IDs\r\n */\r\nexport const FEATURE_GROUP_IDS = [\r\n  \"activeFeatures\",\r\n  \"passiveFeatures\",\r\n  \"backgroundFeatures\",\r\n  \"classFeatures\",\r\n  \"feats\",\r\n  \"monsterFeatures\",\r\n  \"raceFeatures\",\r\n  \"artificerInfusions\",\r\n  \"channelDivinity\",\r\n  \"defensiveTactics\",\r\n  \"eldritchInvocations\",\r\n  \"elementalDisciplines\",\r\n  \"fightingStyles\",\r\n  \"huntersPrey\",\r\n  \"kiAbilities\",\r\n  \"maneuvers\",\r\n  \"metamagicOptions\",\r\n  \"multiattacks\",\r\n  \"pactBoons\",\r\n  \"psionicPowers\",\r\n  \"runes\",\r\n  \"superiorHuntersDefense\"\r\n];\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Groups\r\n */\r\nexport const GROUP = {\r\n  _1stLevelSpells: { id: \"1st-level-spells\", name: \"tokenActionHud.dnd5e.1stLevelSpells\", spellMode: 1, type: \"system\" },\r\n  _2ndLevelSpells: { id: \"2nd-level-spells\", name: \"tokenActionHud.dnd5e.2ndLevelSpells\", spellMode: 2, type: \"system\" },\r\n  _3rdLevelSpells: { id: \"3rd-level-spells\", name: \"tokenActionHud.dnd5e.3rdLevelSpells\", spellMode: 3, type: \"system\" },\r\n  _4thLevelSpells: { id: \"4th-level-spells\", name: \"tokenActionHud.dnd5e.4thLevelSpells\", spellMode: 4, type: \"system\" },\r\n  _5thLevelSpells: { id: \"5th-level-spells\", name: \"tokenActionHud.dnd5e.5thLevelSpells\", spellMode: 5, type: \"system\" },\r\n  _6thLevelSpells: { id: \"6th-level-spells\", name: \"tokenActionHud.dnd5e.6thLevelSpells\", spellMode: 6, type: \"system\" },\r\n  _7thLevelSpells: { id: \"7th-level-spells\", name: \"tokenActionHud.dnd5e.7thLevelSpells\", spellMode: 7, type: \"system\" },\r\n  _8thLevelSpells: { id: \"8th-level-spells\", name: \"tokenActionHud.dnd5e.8thLevelSpells\", spellMode: 8, type: \"system\" },\r\n  _9thLevelSpells: { id: \"9th-level-spells\", name: \"tokenActionHud.dnd5e.9thLevelSpells\", spellMode: 9, type: \"system\" },\r\n  abilities: { id: \"abilities\", name: \"tokenActionHud.dnd5e.abilities\", type: \"system\" },\r\n  actions: { id: \"actions\", name: \"DND5E.ActionPl\", type: \"system\" },\r\n  activeFeatures: { id: \"active-features\", name: \"tokenActionHud.dnd5e.activeFeatures\", type: \"system\" },\r\n  additionalSpells: { id: \"additional-spells\", name: \"DND5E.CAST.SECTIONS.Spellbook\", type: \"system\" },\r\n  artificerInfusions: { id: \"artificer-infusions\", name: \"tokenActionHud.dnd5e.artificerInfusions\", type: \"system\" },\r\n  atWillSpells: { id: \"at-will-spells\", name: \"tokenActionHud.dnd5e.atWillSpells\", spellMode: \"atwill\", type: \"system\" },\r\n  backgroundFeatures: { id: \"background-features\", name: \"tokenActionHud.dnd5e.backgroundFeatures\", type: \"system\" },\r\n  bonusActions: { id: \"bonus-actions\", name: \"tokenActionHud.dnd5e.bonusActions\", type: \"system\" },\r\n  cantrips: { id: \"cantrips\", name: \"tokenActionHud.dnd5e.cantrips\", spellMode: 0, type: \"system\" },\r\n  channelDivinity: { id: \"channel-divinity\", name: \"tokenActionHud.dnd5e.channelDivinity\", type: \"system\" },\r\n  checks: { id: \"checks\", name: \"tokenActionHud.dnd5e.checks\", type: \"system\" },\r\n  classFeatures: { id: \"class-features\", name: \"tokenActionHud.dnd5e.classFeatures\", type: \"system\" },\r\n  combat: { id: \"combat\", name: \"tokenActionHud.combat\", type: \"system\" },\r\n  conditions: { id: \"conditions\", name: \"tokenActionHud.dnd5e.conditions\", type: \"system\" },\r\n  consumables: { id: \"consumables\", name: \"TYPES.Item.consumablePl\", type: \"system\" },\r\n  containers: { id: \"containers\", name: \"TYPES.Item.containerPl\", type: \"system\" },\r\n  counters: { id: \"counters\", name: \"tokenActionHud.dnd5e.counters\", type: \"system\" },\r\n  crewActions: { id: \"crew-actions\", name: \"tokenActionHud.dnd5e.crewActions\", type: \"system\" },\r\n  defensiveTactics: { id: \"defensive-tactics\", name: \"tokenActionHud.dnd5e.defensiveTactics\", type: \"system\" },\r\n  eldritchInvocations: { id: \"eldritch-invocations\", name: \"tokenActionHud.dnd5e.eldritchInvocations\", type: \"system\" },\r\n  elementalDisciplines: { id: \"elemental-disciplines\", name: \"tokenActionHud.dnd5e.elementalDisciplines\", type: \"system\" },\r\n  equipment: { id: \"equipment\", name: \"TYPES.Item.equipmentPl\", type: \"system\" },\r\n  equipped: { id: \"equipped\", name: \"DND5E.Equipped\", type: \"system\" },\r\n  exhaustion: { id: \"exhaustion\", name: \"DND5E.Exhaustion\", type: \"system\" },\r\n  feats: { id: \"feats\", name: \"tokenActionHud.dnd5e.feats\", type: \"system\" },\r\n  fightingStyles: { id: \"fighting-styles\", name: \"tokenActionHud.dnd5e.fightingStyles\", type: \"system\" },\r\n  huntersPrey: { id: \"hunters-prey\", name: \"tokenActionHud.dnd5e.huntersPrey\", type: \"system\" },\r\n  innateSpells: { id: \"innate-spells\", name: \"tokenActionHud.dnd5e.innateSpells\", spellMode: \"innate\", type: \"system\" },\r\n  kiAbilities: { id: \"ki-abilities\", name: \"tokenActionHud.dnd5e.kiAbilities\", type: \"system\" },\r\n  lairActions: { id: \"lair-actions\", name: \"tokenActionHud.dnd5e.lairActions\", type: \"system\" },\r\n  legendaryActions: { id: \"legendary-actions\", name: \"tokenActionHud.dnd5e.legendaryActions\", type: \"system\" },\r\n  loot: { id: \"loot\", name: \"TYPES.Item.lootPl\", type: \"system\" },\r\n  maneuvers: { id: \"maneuvers\", name: \"tokenActionHud.dnd5e.maneuvers\", type: \"system\" },\r\n  metamagicOptions: { id: \"metamagic-options\", name: \"tokenActionHud.dnd5e.metamagicOptions\", type: \"system\" },\r\n  monsterFeatures: { id: \"monster-features\", name: \"tokenActionHud.dnd5e.monsterFeatures\", type: \"system\" },\r\n  multiattacks: { id: \"multiattacks\", name: \"tokenActionHud.dnd5e.multiattacks\", type: \"system\" },\r\n  otherActions: { id: \"other-actions\", name: \"tokenActionHud.dnd5e.otherActions\", type: \"system\" },\r\n  pactBoons: { id: \"pact-boons\", name: \"tokenActionHud.dnd5e.pactBoons\", type: \"system\" },\r\n  pactSpells: { id: \"pact-spells\", name: \"tokenActionHud.dnd5e.pactSpells\", spellMode: \"pact\", type: \"system\" },\r\n  passiveEffects: { id: \"passive-effects\", name: \"DND5E.EffectPassive\", type: \"system\" },\r\n  passiveFeatures: { id: \"passive-features\", name: \"tokenActionHud.dnd5e.passiveFeatures\", type: \"system\" },\r\n  psionicPowers: { id: \"psionic-powers\", name: \"tokenActionHud.dnd5e.psionicPowers\", type: \"system\" },\r\n  raceFeatures: { id: \"race-features\", name: \"tokenActionHud.dnd5e.raceFeatures\", type: \"system\" },\r\n  reactions: { id: \"reactions\", name: \"DND5E.ReactionPl\", type: \"system\" },\r\n  rests: { id: \"rests\", name: \"tokenActionHud.dnd5e.rests\", type: \"system\" },\r\n  runes: { id: \"runes\", name: \"tokenActionHud.dnd5e.runes\", type: \"system\" },\r\n  saves: { id: \"saves\", name: \"DND5E.ClassSaves\", type: \"system\" },\r\n  skills: { id: \"skills\", name: \"tokenActionHud.dnd5e.skills\", type: \"system\" },\r\n  superiorHuntersDefense: { id: \"superior-hunters-defense\", name: \"tokenActionHud.dnd5e.superiorHuntersDefense\", type: \"system\" },\r\n  temporaryEffects: { id: \"temporary-effects\", name: \"DND5E.EffectTemporary\", type: \"system\" },\r\n  token: { id: \"token\", name: \"tokenActionHud.token\", type: \"system\" },\r\n  tools: { id: \"tools\", name: \"TYPES.Item.toolPl\", type: \"system\" },\r\n  unequipped: { id: \"unequipped\", name: \"DND5E.Unequipped\", type: \"system\" },\r\n  utility: { id: \"utility\", name: \"tokenActionHud.utility\", type: \"system\" },\r\n  weapons: { id: \"weapons\", name: \"TYPES.Item.weaponPl\", type: \"system\" }\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Prepared icon\r\n */\r\nexport const PREPARED_ICON = \"fas fa-sun\";\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Proficiency level icons\r\n */\r\nexport const PROFICIENCY_LEVEL_ICON = {\r\n  0: \"fa-regular fa-circle\",\r\n  0.5: \"fa-regular fa-circle-half-stroke\",\r\n  1: \"fa-solid fa-circle\",\r\n  2: \"fa-regular fa-circle-dot\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Rarity\r\n */\r\nexport const RARITY = {\r\n  common: \"tokenActionHud.dnd5e.common\",\r\n  uncommon: \"tokenActionHud.dnd5e.uncommon\",\r\n  rare: \"tokenActionHud.dnd5e.rare\",\r\n  veryRare: \"tokenActionHud.dnd5e.veryRare\",\r\n  legendary: \"tokenActionHud.dnd5e.legendary\",\r\n  artifact: \"tokenActionHud.dnd5e.artifact\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Ritual icon\r\n */\r\nexport const RITUAL_ICON = \"fas fa-circle-r\";\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Spell Group IDs\r\n */\r\nexport const SPELL_GROUP_IDS = [\r\n  \"cantrips\",\r\n  \"_1stLevelSpells\",\r\n  \"_2ndLevelSpells\",\r\n  \"_3rdLevelSpells\",\r\n  \"_4thLevelSpells\",\r\n  \"_5thLevelSpells\",\r\n  \"_6thLevelSpells\",\r\n  \"_7thLevelSpells\",\r\n  \"_8thLevelSpells\",\r\n  \"_9thLevelSpells\",\r\n  \"atWillSpells\",\r\n  \"innateSpells\",\r\n  \"pactSpells\",\r\n  \"additionalSpells\"\r\n];\r\n","import { MODULE } from \"./constants.js\";\r\n\r\nexport let Utils = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  Utils = class Utils {\r\n    /**\r\n     * Capitalize the first letter of every word\r\n     * @param {string} value The string to capitalize\r\n     * @returns {string}     The capitalized string\r\n     */\r\n    static capitalize(value) {\r\n      return value.replace(\r\n        /\\w\\S*/g,\r\n        text => text.charAt(0).toUpperCase() + text.substring(1).toLowerCase()\r\n      );\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get setting value\r\n     * @param {string} key The key\r\n     * @param {string=null} defaultValue The default value\r\n     * @returns {*} The setting value\r\n     */\r\n    static getSetting(key, defaultValue = null) {\r\n      let value = defaultValue ?? null;\r\n      try {\r\n        value = game.settings.get(MODULE.ID, key);\r\n      } catch{\r\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\r\n      }\r\n      return value;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Set setting value\r\n     * @param {string} key The key\r\n     * @param {string} value The value\r\n     */\r\n    static async setSetting(key, value) {\r\n      try {\r\n        value = await game.settings.set(MODULE.ID, key, value);\r\n        coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`);\r\n      } catch{\r\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\r\n      }\r\n    }\r\n  };\r\n});\r\n","// System Module Imports\r\nimport {\r\n  ACTIVATION_TYPE, ACTION_TYPE, CONCENTRATION_ICON, CUSTOM_DND5E, FEATURE_GROUP_IDS,\r\n  GROUP, PREPARED_ICON, PROFICIENCY_LEVEL_ICON, RARITY, SPELL_GROUP_IDS\r\n} from \"./constants.js\";\r\nimport { Utils } from \"./utils.js\";\r\n\r\nexport let ActionHandler = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\r\n    // Initialize action variables\r\n    featureActions = null;\r\n\r\n    inventoryActions = null;\r\n\r\n    spellActions = null;\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build System Actions\r\n     * @override\r\n     * @param {Array} groupIds\r\n     * @returns {object}\r\n     */\r\n    async buildSystemActions(groupIds) {\r\n      // Set actor and token variables\r\n      this.actors = (!this.actor) ? this.#getValidActors() : [this.actor];\r\n      this.tokens = (!this.token) ? this.#getValidTokens() : [this.token];\r\n\r\n      // Set items variable\r\n      if (this.actor) {\r\n        this.items = coreModule.api.Utils.sortItemsByName(this.#discardSlowItems(this.actor.items));\r\n      }\r\n\r\n      // Set settings variables\r\n      this.abbreviateSkills = Utils.getSetting(\"abbreviateSkills\");\r\n      this.displaySpellInfo = Utils.getSetting(\"displaySpellInfo\");\r\n      this.showItemsWithoutActivationCosts = Utils.getSetting(\"showItemsWithoutActivationCosts\");\r\n      this.showUnchargedItems = Utils.getSetting(\"showUnchargedItems\");\r\n      this.showUnequippedItems = Utils.getSetting(\"showUnequippedItems\");\r\n      if (this.actor?.type === \"npc\" && !this.showUnequippedItems) {\r\n        this.showUnequippedItems = Utils.getSetting(\"showUnequippedItemsNpcs\");\r\n      }\r\n      this.showUnpreparedSpells = Utils.getSetting(\"showUnpreparedSpells\");\r\n\r\n      this.activationgroupIds = [\r\n        \"actions\",\r\n        \"bonus-actions\",\r\n        \"crew-actions\",\r\n        \"lair-actions\",\r\n        \"legendary-actions\",\r\n        \"reactions\",\r\n        \"other-actions\"\r\n      ];\r\n\r\n      if (this.actor?.type === \"character\" || this.actor?.type === \"npc\") {\r\n        this.inventorygroupIds = [\r\n          \"equipped\",\r\n          \"consumables\",\r\n          \"containers\",\r\n          \"equipment\",\r\n          \"loot\",\r\n          \"tools\",\r\n          \"weapons\",\r\n          \"unequipped\"\r\n        ];\r\n\r\n        await this.#buildCharacterActions();\r\n      } else if (this.actor?.type === \"vehicle\") {\r\n        this.inventorygroupIds = [\r\n          \"consumables\",\r\n          \"equipment\",\r\n          \"tools\",\r\n          \"weapons\"\r\n        ];\r\n\r\n        await this.#buildVehicleActions();\r\n      } else if (!this.actor) {\r\n        await this.#buildMultipleTokenActions();\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build character actions\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    async #buildCharacterActions() {\r\n      await Promise.all([\r\n        this.#buildConditions(),\r\n        this.#buildEffects(),\r\n        this.#buildFeatures(),\r\n        this.#buildInventory(),\r\n        this.#buildSpells()\r\n      ]);\r\n      this.#buildAbilities(\"ability\", \"abilities\");\r\n      this.#buildAbilities(\"check\", \"checks\");\r\n      this.#buildAbilities(\"save\", \"saves\");\r\n      this.#buildCombat();\r\n      this.#buildCounters();\r\n      this.#buildExhaustion();\r\n      this.#buildRests();\r\n      this.#buildSkills();\r\n      this.#buildUtility();\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build vehicle actions\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    async #buildVehicleActions() {\r\n      await Promise.all([\r\n        this.#buildConditions(),\r\n        this.#buildEffects(),\r\n        this.#buildFeatures(),\r\n        this.#buildInventory()\r\n      ]);\r\n      this.#buildAbilities(\"ability\", \"abilities\");\r\n      this.#buildAbilities(\"check\", \"checks\");\r\n      this.#buildAbilities(\"save\", \"saves\");\r\n      this.#buildCombat();\r\n      this.#buildUtility();\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build multiple token actions\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    async #buildMultipleTokenActions() {\r\n      this.#buildAbilities(\"ability\", \"abilities\");\r\n      this.#buildAbilities(\"check\", \"checks\");\r\n      this.#buildAbilities(\"save\", \"saves\");\r\n      this.#buildCombat();\r\n      await this.#buildConditions();\r\n      this.#buildRests();\r\n      this.#buildSkills();\r\n      this.#buildUtility();\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build abilities\r\n     * @private\r\n     * @param {string} actionType\r\n     * @param {string} groupId\r\n     */\r\n    #buildAbilities(actionType, groupId) {\r\n      // Get abilities and exit if none exist\r\n      const abilities = this.actor?.system.abilities || CONFIG.DND5E.abilities;\r\n      if (abilities.length === 0) return;\r\n\r\n      // Get actions\r\n      const actions = Object.entries(abilities)\r\n        .filter(ability => abilities[ability[0]].value !== 0)\r\n        .map(([abilityId, ability]) => {\r\n          const name = CONFIG.DND5E.abilities[abilityId].label;\r\n          // ability.save deprecated in dnd5e 4.3.\r\n          const abilitySaveValue = ability?.save?.value ?? ability?.save;\r\n\r\n          const mod = (groupId === \"saves\") ? abilitySaveValue : ability?.mod;\r\n          return {\r\n            id: `${actionType}-${abilityId}`,\r\n            name: (this.abbreviateSkills) ? Utils.capitalize(abilityId) : name,\r\n            icon1: (groupId !== \"checks\") ? this.#getProficiencyIcon(abilities[abilityId].proficient) : \"\",\r\n            info1: (this.actor) ? {\r\n              text: coreModule.api.Utils.getModifier(mod),\r\n              title: `${game.i18n.localize(\"DND5E.ActionAbil\")}: ${coreModule.api.Utils.getModifier(mod)}`\r\n            } : null,\r\n            info2: (this.actor && groupId === \"abilities\") ? {\r\n              text: `(${coreModule.api.Utils.getModifier(abilitySaveValue)})`,\r\n              title: `${game.i18n.localize(\"DND5E.SavingThrow\")}: ${coreModule.api.Utils.getModifier(abilitySaveValue)}`\r\n            } : null,\r\n            listName: this.#getListName(actionType, name),\r\n            system: { actionType, actionId: abilityId }\r\n          };\r\n        });\r\n\r\n      // Add actions to action list\r\n      this.addActions(actions, { id: groupId });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build activations\r\n     * @public\r\n     * @param {object} data  groupData, actionData, actionType\r\n     */\r\n    async buildActivations(data) {\r\n      const { groupData, actionData, actionType = \"item\" } = data;\r\n\r\n      // Create map of items according to activation type\r\n      const activationItems = new Map();\r\n\r\n      // Loop items and add to activationItems\r\n      for (const [key, value] of actionData) {\r\n        const activationType = value.system?.activities?.contents[0]?.activation?.type;\r\n        const groupId = ACTIVATION_TYPE[activationType]?.group ?? \"other\";\r\n        if (!activationItems.has(groupId)) activationItems.set(groupId, new Map());\r\n        activationItems.get(groupId).set(key, value);\r\n      }\r\n\r\n      // Loop through action group ids\r\n      for (const value of Object.values(ACTIVATION_TYPE)) {\r\n        const group = value.group;\r\n\r\n        // Skip if no items exist\r\n        if (!activationItems.has(group)) continue;\r\n\r\n        // Clone and add to group data\r\n        const groupDataClone = { ...groupData, id: `${group}+${groupData.id}`, type: \"system-derived\" };\r\n\r\n        // Set Equipped and Unequipped groups to not selected by default\r\n        if ([\"equipped\", \"unequipped\"].includes(groupData.id)) { groupDataClone.defaultSelected = false; }\r\n\r\n        // Create parent group data\r\n        const parentgroupData = { id: group, type: \"system\" };\r\n\r\n        // Add group to HUD\r\n        await this.addGroup(groupDataClone, parentgroupData);\r\n\r\n        // Add spell slot info to group\r\n        if (actionType === \"spell\") { this.addGroupInfo(groupDataClone); }\r\n\r\n        // Build actions\r\n        await this.buildActions({\r\n          groupData: groupDataClone,\r\n          actionData: activationItems.get(group),\r\n          actionType\r\n        });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build combat\r\n     * @private\r\n     */\r\n    #buildCombat() {\r\n      // If token's turn, include endTurn\r\n      const combatType = {\r\n        initiative: \"tokenActionHud.dnd5e.rollInitiative\",\r\n        ...(game.combat?.current?.tokenId === this.token?.id && { endTurn: \"tokenActionHud.endTurn\" })\r\n      };\r\n\r\n      const tokens = coreModule.api.Utils.getControlledTokens();\r\n      const tokenIds = tokens?.map(token => token.id);\r\n      const combatants = (game.combat)\r\n        ? game.combat.combatants.filter(combatant => tokenIds.includes(combatant.tokenId))\r\n        : [];\r\n\r\n      const getInfo1 = id => {\r\n        if (id === \"initiative\" && combatants.length === 1) {\r\n          const currentInitiative = combatants[0].initiative;\r\n          return { class: \"tah-spotlight\", text: currentInitiative };\r\n        }\r\n        return {};\r\n      };\r\n\r\n      const getActive = () => { return combatants.length > 0 && (combatants.every(combatant => combatant?.initiative)) ? \" active\" : \"\";};\r\n\r\n      // Get actions\r\n      const actionType = \"utility\";\r\n      const actions = Object.entries(combatType).map(([id, name]) => {\r\n        return {\r\n          id,\r\n          name: game.i18n.localize(name),\r\n          info1: getInfo1(id),\r\n          cssClass: (id === \"initiative\" ) ? `toggle${getActive()}` : \"\",\r\n          listName: this.#getListName(actionType, name),\r\n          system: { actionType, actionId: id }\r\n        };\r\n      });\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"combat\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build conditions\r\n     * @private\r\n     */\r\n    async #buildConditions() {\r\n      if (this.tokens?.length === 0) return;\r\n\r\n      // Get conditions and exit if none exist\r\n      const conditions = CONFIG.statusEffects.filter(condition => condition.id !== \"\");\r\n      if (conditions.length === 0) return;\r\n\r\n      // Get actions\r\n      const actionType = \"condition\";\r\n      const actions = await Promise.all(conditions.map(async condition => {\r\n        const hasCondition = this.actors.every(actor => {\r\n          return actor.effects.some(effect => effect.statuses.some(status => status === condition.id)\r\n          && !effect?.disabled);\r\n        });\r\n        const name = game.i18n.localize(condition.label) ?? condition.name;\r\n        return {\r\n          id: condition.id,\r\n          name,\r\n          img: coreModule.api.Utils.getImage(condition),\r\n          cssClass: `toggle${(hasCondition) ? \" active\" : \"\"}`,\r\n          listName: this.#getListName(actionType, name),\r\n          tooltip: this.#getConditionTooltipData(condition.id, condition.name),\r\n          system: { actionType, actionId: condition.id }\r\n        };\r\n      }));\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"conditions\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build counters\r\n     * @private\r\n     */\r\n    async #buildCounters() {\r\n      if (!coreModule.api.Utils.isModuleActive(CUSTOM_DND5E.ID)\r\n        || !CUSTOM_DND5E.COUNTERS[this.actor?.type]) return;\r\n\r\n      const actionType = \"counter\";\r\n\r\n      let counters = game.settings.get(CUSTOM_DND5E.ID, CUSTOM_DND5E.COUNTERS[this.actor?.type]) ?? {};\r\n\r\n      if (coreModule.api.Utils.isModuleActive(CUSTOM_DND5E.ID) && Object.keys(counters).length) {\r\n        counters = Object.entries(counters)\r\n          .filter(([_, value]) => value.visible)\r\n          .map(([key, value]) => {\r\n            value.key = key;\r\n            return value;\r\n          });\r\n      } else {\r\n        counters = [\r\n          {\r\n            name: game.i18n.localize(\"DND5E.DeathSave\"),\r\n            type: \"successFailure\",\r\n            system: true,\r\n            visible: true,\r\n            key: \"death-saves\"\r\n          },\r\n          {\r\n            name: game.i18n.localize(\"DND5E.Exhaustion\"),\r\n            type: \"number\",\r\n            system: true,\r\n            visible: true,\r\n            key: \"exhaustion\"\r\n          },\r\n          {\r\n            name: game.i18n.localize(\"DND5E.Inspiration\"),\r\n            type: \"checkbox\",\r\n            system: true,\r\n            visible: true,\r\n            key: \"inspiration\"\r\n          }\r\n        ];\r\n      }\r\n\r\n      // Get actions\r\n      const actions = counters.map(counter => {\r\n        let active = \"\";\r\n        let cssClass = \"\";\r\n        let img = \"\";\r\n        let info1 = \"\";\r\n        if (counter.system) {\r\n          switch (counter.key) {\r\n            case \"exhaustion\":\r\n              active = (this.actor.system.attributes.exhaustion > 0) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              img = coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/exhaustion.svg\");\r\n              info1 = { text: this.actor.system.attributes.exhaustion };\r\n              break;\r\n            case \"death-saves\":\r\n              img = coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/death-saves.svg\");\r\n              info1 = { text: `${this.actor.system.attributes.death.success}/${this.actor.system.attributes.death.failure}` };\r\n              break;\r\n            case \"inspiration\":\r\n              active = (this.actor.system.attributes.inspiration) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              img = coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/inspiration.svg\");\r\n              break;\r\n          }\r\n        } else {\r\n          const value = this.actor.getFlag(CUSTOM_DND5E.ID, counter.key);\r\n          switch (counter.type) {\r\n            case \"checkbox\":\r\n              active = (value) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              break;\r\n            case \"fraction\":\r\n              active = (value.value > 0) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              info1 = { text: `${value.value ?? 0}/${value.max ?? 0}` };\r\n              break;\r\n            case \"number\":\r\n              active = (value > 0) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              info1 = { text: value };\r\n              break;\r\n            case \"successFailure\":\r\n              info1 = { text: `${value?.success ?? 0}/${value?.failure ?? 0}` };\r\n              break;\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: counter.key,\r\n          name: counter.label,\r\n          listName: this.#getListName(actionType, counter.name),\r\n          cssClass,\r\n          img,\r\n          info1,\r\n          system: { actionType, counterKey: counter.key, counterType: counter.type}\r\n        };\r\n      });\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"counters\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build effects\r\n     * @private\r\n     */\r\n    async #buildEffects() {\r\n      const actionType = \"effect\";\r\n\r\n      // Get effects and exit if none exist\r\n      const effects = new Map(this.actor.allApplicableEffects().map(effect => [effect.id, effect]));\r\n      if (effects.size === 0) return;\r\n\r\n      // Map passive and temporary effects to new maps\r\n      const passiveEffects = new Map();\r\n      const temporaryEffects = new Map();\r\n      const statusEffectIds = new Set(CONFIG.statusEffects.map(statusEffect => statusEffect._id));\r\n\r\n      // Iterate effects and add to a map based on the isTemporary value\r\n      for (const [effectId, effect] of effects.entries()) {\r\n        if (effect.isSuppressed) continue;\r\n        if (effect.parent?.system?.identified === false && !game.user.isGM) continue;\r\n        if (statusEffectIds.has(effect.id)) continue;\r\n\r\n        if (effect.isTemporary) { temporaryEffects.set(effectId, effect); }\r\n        else { passiveEffects.set(effectId, effect); }\r\n      }\r\n\r\n      // Build passive and temporary effects\r\n      await Promise.all([\r\n        this.buildActions({ groupData: { id: \"passive-effects\" }, actionData: passiveEffects, actionType }),\r\n        this.buildActions({ groupData: { id: \"temporary-effects\" }, actionData: temporaryEffects, actionType })\r\n      ]);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build exhaustion\r\n     * @private\r\n     */\r\n    #buildExhaustion() {\r\n      // Exit if every actor is not the character type\r\n      if (!this.actors.every(actor => actor.type === \"character\")) return;\r\n\r\n      // Get actions\r\n      const actionType = \"exhaustion\";\r\n      const active = this.actor.system.attributes.exhaustion > 0 ? \" active\" : \"\";\r\n      const actions = [{\r\n        id: \"exhaustion\",\r\n        name: game.i18n.localize(\"DND5E.Exhaustion\"),\r\n        cssClass: `toggle${active}`,\r\n        img: coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/exhaustion.svg\"),\r\n        info1: { text: this.actor.system.attributes.exhaustion },\r\n        listName: this.#getListName(actionType, name),\r\n        system: { actionType, actionId: \"exhaustion\" }\r\n      }];\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"exhaustion\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build features\r\n     * @private\r\n     */\r\n    async #buildFeatures() {\r\n      // Filter feats from items and exit if none exist\r\n      const feats = new Map([...this.items].filter(([, value]) => value.type === \"feat\"));\r\n      if (feats.size === 0) return;\r\n\r\n      // Map active and passive features to new maps\r\n      const featuresMap = new Map([\r\n        [\"activeFeatures\", new Map()],\r\n        [\"passiveFeatures\", new Map()]\r\n      ]);\r\n\r\n      const featureType = {\r\n        background: \"backgroundFeatures\",\r\n        class: \"classFeatures\",\r\n        monster: \"monsterFeatures\",\r\n        race: \"raceFeatures\",\r\n        feats: \"feats\"\r\n      };\r\n\r\n      const classFeatureType = {\r\n        artificerInfusion: \"artificerInfusions\",\r\n        channelDivinity: \"channelDivinity\",\r\n        defensiveTactic: \"defensiveTactics\",\r\n        eldritchInvocation: \"eldritchInvocations\",\r\n        elementalDiscipline: \"elementalDisciplines\",\r\n        fightingStyle: \"fightingStyles\",\r\n        huntersPrey: \"huntersPrey\",\r\n        ki: \"kiAbilities\",\r\n        maneuver: \"maneuvers\",\r\n        metamagic: \"metamagicOptions\",\r\n        multiattack: \"multiattacks\",\r\n        pact: \"pactBoons\",\r\n        psionicPower: \"psionicPowers\",\r\n        rune: \"runes\",\r\n        superiorHuntersDefense: \"superiorHuntersDefense\"\r\n      };\r\n\r\n      for (const [key, value] of feats) {\r\n        const activationType = value.system.activities.contents[0]?.type;\r\n        const type = value.system.type.value;\r\n        const subType = value.system.type?.subtype;\r\n\r\n        if (activationType) { featuresMap.get(\"activeFeatures\").set(key, value); }\r\n        else { featuresMap.get(\"passiveFeatures\").set(key, value); }\r\n\r\n        // Map feature types\r\n        if (featureType[type]) {\r\n          if (!featuresMap.has(featureType[type])) featuresMap.set(featureType[type], new Map());\r\n          featuresMap.get(featureType[type]).set(key, value);\r\n        }\r\n\r\n        // Map class feature subtypes\r\n        if (classFeatureType[subType]) {\r\n          if (!featuresMap.has(classFeatureType[subType])) featuresMap.set(classFeatureType[subType], new Map());\r\n          featuresMap.get(classFeatureType[subType]).set(key, value);\r\n        }\r\n      }\r\n\r\n      // Loop through inventory groups ids\r\n      for (const id of FEATURE_GROUP_IDS) {\r\n        const actionData = featuresMap.get(id);\r\n        if (!actionData || actionData.size === 0) continue;\r\n\r\n        // Create group data\r\n        const groupData = {\r\n          id: GROUP[id].id,\r\n          name: game.i18n.localize(GROUP[id].name) ?? \"\"\r\n        };\r\n\r\n        // Build actions and activations\r\n        const actionType = \"feature\";\r\n        await this.buildActions({ groupData, actionData, actionType });\r\n        await this.buildActivations({ groupData, actionData, actionType });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build inventory\r\n     * @private\r\n     */\r\n    async #buildInventory() {\r\n      // Exit early if no items exist\r\n      if (this.items.size === 0) return;\r\n\r\n      // Initialize inventory map categories\r\n      const inventoryMap = new Map([\r\n        [\"equipped\", new Map()],\r\n        [\"unequipped\", new Map()],\r\n        [\"consumables\", new Map()],\r\n        [\"containers\", new Map()],\r\n        [\"equipment\", new Map()],\r\n        [\"loot\", new Map()],\r\n        [\"tools\", new Map()],\r\n        [\"weapons\", new Map()]\r\n      ]);\r\n\r\n      for (const [key, value] of this.items) {\r\n        // Set items into maps\r\n        if (value.system?.quantity > 0 && this.#isActiveItem(value)) {\r\n          if (value.system.equipped) { inventoryMap.get(\"equipped\").set(key, value); }\r\n          else { inventoryMap.get(\"unequipped\").set(key, value); }\r\n\r\n          if (this.#isUsableItem(value) && value.type === \"consumable\") inventoryMap.get(\"consumables\").set(key, value);\r\n          if (this.#isEquippedItem(value)) {\r\n            switch (value.type) {\r\n              case \"container\": inventoryMap.get(\"containers\").set(key, value); break;\r\n              case \"equipment\": inventoryMap.get(\"equipment\").set(key, value); break;\r\n              case \"loot\": inventoryMap.get(\"loot\").set(key, value); break;\r\n              case \"tool\": inventoryMap.get(\"tools\").set(key, value); break;\r\n              case \"weapon\": inventoryMap.get(\"weapons\").set(key, value); break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Loop through inventory subcateogry ids\r\n      for (const groupId of this.inventorygroupIds) {\r\n        const actionData = inventoryMap.get(groupId);\r\n        if (!actionData || actionData.size === 0) continue;\r\n\r\n        // Create group data\r\n        const groupData = {\r\n          id: groupId,\r\n          name: game.i18n.localize(GROUP[groupId].name)\r\n        };\r\n\r\n        const data = { groupData, actionData };\r\n\r\n        // Build actions and activations\r\n        await this.buildActions(data);\r\n        await this.buildActivations(data);\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build rests\r\n     * @private\r\n     */\r\n    #buildRests() {\r\n      // Exit if every actor is not the character type\r\n      if (this.actors.length === 0 || !this.actors.every(actor => actor.type === \"character\")) return;\r\n\r\n      // Get actions\r\n      const actionType = \"utility\";\r\n      const restTypes = { shortRest: \"DND5E.REST.Short.Label\", longRest: \"DND5E.REST.Long.Label\" };\r\n      const actions = Object.entries(restTypes).map(([id, name]) => {\r\n        name = game.i18n.localize(name);\r\n        return {\r\n          id,\r\n          name,\r\n          listName: this.#getListName(actionType, name),\r\n          system: { actionType, actionId: id }\r\n        };\r\n      });\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"rests\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build skills\r\n     * @private\r\n     */\r\n    #buildSkills() {\r\n      // Get skills and exit if none exist\r\n      const skills = this.actor?.system.skills || CONFIG.DND5E.skills;\r\n      if (skills.length === 0) return;\r\n\r\n      // Get actions\r\n      const actionType = \"skill\";\r\n      const actions = Object.entries(skills).map(([id, skill]) => {\r\n        try {\r\n          const name = CONFIG.DND5E.skills[id].label;\r\n          return {\r\n            id,\r\n            name: this.abbreviateSkills ? Utils.capitalize(id) : name,\r\n            icon1: this.#getProficiencyIcon(skill.value),\r\n            info1: (this.actor) ? { text: coreModule.api.Utils.getModifier(skill.total) } : \"\",\r\n            listName: this.#getListName(actionType, name),\r\n            system: { actionType, actionId: id }\r\n          };\r\n        } catch(error) {\r\n          coreModule.api.Logger.error(skill);\r\n          return null;\r\n        }\r\n      }).filter(skill => !!skill);\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"skills\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build spells\r\n     */\r\n    async #buildSpells() {\r\n      // Filter items for spells and exit if none exist\r\n      const spells = new Map([...this.items].filter(([, value]) => value.type === \"spell\"));\r\n      if (spells.size === 0) return;\r\n\r\n      // Initialize spells map categories\r\n      const spellsMap = new Map([\r\n        [\"atWillSpells\", new Map()],\r\n        [\"innateSpells\", new Map()],\r\n        [\"pactSpells\", new Map()],\r\n        [\"cantrips\", new Map()],\r\n        [\"_1stLevelSpells\", new Map()],\r\n        [\"_2ndLevelSpells\", new Map()],\r\n        [\"_3rdLevelSpells\", new Map()],\r\n        [\"_4thLevelSpells\", new Map()],\r\n        [\"_5thLevelSpells\", new Map()],\r\n        [\"_6thLevelSpells\", new Map()],\r\n        [\"_7thLevelSpells\", new Map()],\r\n        [\"_8thLevelSpells\", new Map()],\r\n        [\"_9thLevelSpells\", new Map()],\r\n        [\"additionalSpells\", new Map()]\r\n      ]);\r\n\r\n      // Loop through items\r\n      for (const [key, value] of spells) {\r\n        if (!this.#isUsableItem(value) || !this.#isUsableSpell(value)) continue;\r\n\r\n        if (value.system.linkedActivity) {\r\n          if (value.system.linkedActivity.displayInSpellbook) {\r\n            spellsMap.get(\"additionalSpells\").set(key, value);\r\n          }\r\n        } else {\r\n          switch (value.system.method) {\r\n            case \"atwill\":\r\n              spellsMap.get(\"atWillSpells\").set(key, value); break;\r\n            case \"innate\":\r\n              spellsMap.get(\"innateSpells\").set(key, value); break;\r\n            case \"pact\":\r\n              spellsMap.get(\"pactSpells\").set(key, value); break;\r\n            default: {\r\n              switch (value.system.level) {\r\n                case 0:\r\n                  spellsMap.get(\"cantrips\").set(key, value); break;\r\n                case 1:\r\n                  spellsMap.get(\"_1stLevelSpells\").set(key, value); break;\r\n                case 2:\r\n                  spellsMap.get(\"_2ndLevelSpells\").set(key, value); break;\r\n                case 3:\r\n                  spellsMap.get(\"_3rdLevelSpells\").set(key, value); break;\r\n                case 4:\r\n                  spellsMap.get(\"_4thLevelSpells\").set(key, value); break;\r\n                case 5:\r\n                  spellsMap.get(\"_5thLevelSpells\").set(key, value); break;\r\n                case 6:\r\n                  spellsMap.get(\"_6thLevelSpells\").set(key, value); break;\r\n                case 7:\r\n                  spellsMap.get(\"_7thLevelSpells\").set(key, value); break;\r\n                case 8:\r\n                  spellsMap.get(\"_8thLevelSpells\").set(key, value); break;\r\n                case 9:\r\n                  spellsMap.get(\"_9thLevelSpells\").set(key, value); break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Reverse sort spell slots by level\r\n      const systemSpells = Object.entries(this.actor.system.spells).reverse();\r\n\r\n      // Set spell slot availability\r\n      const spellSlotsMap = new Map();\r\n      let spellSlotAvailable = this.showUnchargedItems;\r\n      let pactSlotAvailable = this.showUnchargedItems;\r\n      let pactSlot = null;\r\n\r\n      for (const [key, value] of systemSpells) {\r\n        const hasValue = value.value > 0;\r\n        const hasMax = value.max > 0;\r\n        const hasLevel = value.level > 0;\r\n\r\n        if (key === \"pact\") {\r\n          pactSlotAvailable = pactSlotAvailable || (hasValue && hasMax && hasLevel);\r\n          value.slotAvailable = pactSlotAvailable && hasLevel;\r\n          pactSlot = [key, value];\r\n        } else if (key.startsWith(\"spell\") && key !== \"spell0\") {\r\n          spellSlotAvailable = spellSlotAvailable || (hasValue && hasMax);\r\n          value.slotAvailable = spellSlotAvailable;\r\n          spellSlotsMap.set(key, value);\r\n        } else if (hasValue) {\r\n          value.slotsAvailable = true;\r\n          spellSlotsMap.set(key, value);\r\n        }\r\n      }\r\n\r\n      // Set equivalent spell slot where pact slot is available\r\n      if (pactSlot[1].slotAvailable) {\r\n        const spellSlot = spellSlotsMap.get(`spell${pactSlot[1].level}`);\r\n        spellSlot.slotsAvailable = true;\r\n      }\r\n\r\n      const spellSlotModes = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9, \"pact\"]);\r\n\r\n      for (const id of SPELL_GROUP_IDS) {\r\n        // Skip if no spells exist\r\n        if (!spellsMap.has(id)) continue;\r\n\r\n        const spellMode = GROUP[id].spellMode;\r\n        const levelInfo = (spellMode === \"pact\") ? pactSlot[1] : spellSlotsMap.get(`spell${spellMode}`);\r\n        const { value: slots = 0, max = 0, slotAvailable = false } = levelInfo || {};\r\n\r\n        // Skip if spells require spell slots and none are available\r\n        if (!slotAvailable && spellSlotModes.has(spellMode)) continue;\r\n\r\n        // Create group data\r\n        const groupData = {\r\n          id: GROUP[id].id,\r\n          name: game.i18n.localize(GROUP[id].name),\r\n          info: { info1: { class: \"tah-spotlight\", text: (max > 0) ? `${slots}/${max}` : \"\" } }\r\n        };\r\n\r\n        // Add spell slot info to group\r\n        this.addGroupInfo(groupData);\r\n\r\n        const data = { groupData, actionData: spellsMap.get(id), actionType: \"spell\" };\r\n\r\n        // Build actions and activations\r\n        await this.buildActions(data);\r\n        await this.buildActivations(data);\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build utility\r\n     * @private\r\n     */\r\n    #buildUtility() {\r\n      // Exit if every actor is not the character type\r\n      if (this.actors.length === 0) return;\r\n      if (!this.actors.every(actor => actor.type === \"character\")) return;\r\n\r\n      const actionType = \"utility\";\r\n\r\n      // Set utility types\r\n      const utilityTypes = {\r\n        deathSave: { name: game.i18n.localize(\"DND5E.DeathSave\") },\r\n        inspiration: { name: game.i18n.localize(\"DND5E.Inspiration\") }\r\n      };\r\n\r\n      // Delete 'deathSave' for multiple tokens\r\n      if (!this.actor || this.actor.system.attributes.hp.value > 0) delete utilityTypes.deathSave;\r\n\r\n      // Get actions\r\n      const actions = Object.entries(utilityTypes)\r\n        .map(utilityType => {\r\n          const id = utilityType[0];\r\n          const name = utilityType[1].name;\r\n          let cssClass = \"\";\r\n          if (utilityType[0] === \"inspiration\") {\r\n            const active = this.actors.every(actor => actor.system.attributes?.inspiration)\r\n              ? \" active\"\r\n              : \"\";\r\n            cssClass = `toggle${active}`;\r\n          }\r\n          return {\r\n            id,\r\n            name,\r\n            cssClass,\r\n            listName: this.#getListName(actionType, name),\r\n            system: { actionType, actionId: id }\r\n          };\r\n        });\r\n\r\n      // Crreate group data\r\n      const groupData = { id: \"utility\" };\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, groupData);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build actions\r\n     * @public\r\n     * @param {object} data actionData, groupData, actionType\r\n     * @param {object} options\r\n     */\r\n    async buildActions(data, options) {\r\n      const { actionData, groupData, actionType } = data;\r\n\r\n      // Exit if there is no action data\r\n      if (actionData.size === 0) return;\r\n\r\n      // Exit if there is no groupId\r\n      const groupId = (typeof groupData === \"string\" ? groupData : groupData?.id);\r\n      if (!groupId) return;\r\n\r\n      // Get actions\r\n      const actions = await Promise.all([...actionData].map(async item => await this.#getAction(item[1], actionType)));\r\n\r\n      // Add actions to action list\r\n      this.addActions(actions, groupData);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get action\r\n     * @private\r\n     * @param {object} entity      The entity\r\n     * @param {string} actionType The action type\r\n     * @returns {object}           The action\r\n     */\r\n    async #getAction(entity, actionType = \"item\") {\r\n      const id = entity.id ?? entity._id;\r\n      let name = entity?.name ?? entity?.label;\r\n      let cssClass = \"\";\r\n      if (Object.hasOwn(entity, \"disabled\")) {\r\n        const active = (!entity.disabled) ? \" active\" : \"\";\r\n        cssClass = `toggle${active}`;\r\n      }\r\n      const info = this.#getItemInfo(entity);\r\n      const tooltip = this.#getTooltipData(entity);\r\n      return {\r\n        id,\r\n        name,\r\n        cssClass,\r\n        img: coreModule.api.Utils.getImage(entity),\r\n        icon1: this.#getActivationTypeIcon(entity.system?.activities?.contents[0]?.activation.type),\r\n        icon2: this.#getPreparedIcon(entity),\r\n        icon3: this.#getConcentrationIcon(entity),\r\n        info1: info?.info1,\r\n        info2: info?.info2,\r\n        info3: info?.info3,\r\n        listName: this.#getListName(actionType, name),\r\n        tooltip,\r\n        system: { actionType, actionId: id }\r\n      };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is active item\r\n     * @private\r\n     * @param {object} item The item\r\n     * @returns {boolean}   Whether the item is active\r\n     */\r\n    #isActiveItem(item) {\r\n      if (this.showItemsWithoutActivationCosts) return true;\r\n      const activationTypes = new Set(Object.keys(CONFIG.DND5E.activityActivationTypes).filter(activationType => activationType !== \"none\"));\r\n      const activationType = item.system?.activities?.contents[0]?.activation?.type;\r\n      return activationTypes.has(activationType) || item.type === \"tool\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is equipped item\r\n     * @private\r\n     * @param {object} item The item\r\n     * @returns {boolean}   Whether the item is equipped\r\n     */\r\n    #isEquippedItem(item) {\r\n      const excludedTypes = [\"consumable\", \"spell\", \"feat\"];\r\n      return (this.showUnequippedItems && !excludedTypes.includes(item.type))\r\n      || (item.system.equipped && item.type !== \"consumable\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is usable item\r\n     * @private\r\n     * @param {object} item The item\r\n     * @returns {boolean}   Whether the item is usable\r\n     */\r\n    #isUsableItem(item) {\r\n      return this.showUnchargedItems || !!item.system.uses?.value || !item.system.uses?.max;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is usable spell\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {boolean}    Whether the spell is usable\r\n     */\r\n    #isUsableSpell(spell) {\r\n      if (this.actor?.type !== \"character\" && this.showUnequippedItems) return true;\r\n      if (this.showUnpreparedSpells) return true;\r\n\r\n      // Return true if the spell has a spellcasting method other than 'spell' (which maps to 'prepared') or is prepared\r\n      return (spell.system.method !== \"spell\")\r\n        || spell.system.prepared || spell.system.linkedActivity?.displayInSpellbook;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    #getListName(actionType, actionName) {\r\n      const prefix = `${game.i18n.localize(ACTION_TYPE[actionType])}: ` ?? \"\";\r\n      return `${prefix}${actionName}` ?? \"\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get item info\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {object}\r\n     */\r\n    #getItemInfo(item) {\r\n      const info1 = item.type === \"spell\" ? this.#getSpellInfo(item) : this.#getQuantityData(item);\r\n      const info2 = this.#getUsesData(item);\r\n      const info3 = this.#getConsumeData(item);\r\n\r\n      return { info1, info2, info3 };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Add spell info\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {object}     The spell info\r\n     */\r\n    #getSpellInfo(spell) {\r\n      if (!this.displaySpellInfo) return null;\r\n\r\n      const components = spell.system?.properties;\r\n      if (!components) return null;\r\n\r\n      const info = { text: \"\", title: \"\" };\r\n      const componentTypes = {\r\n        vocal: \"DND5E.ComponentVerbal\",\r\n        somatic: \"DND5E.ComponentSomatic\",\r\n        material: \"DND5E.ComponentMaterial\"\r\n      };\r\n\r\n\r\n      const componentsArray = Object.entries(componentTypes)\r\n        .filter(([key]) => components[key])\r\n        .map(([key, label]) => {\r\n          info.text += game.i18n.localize(`${label}Abbr`);\r\n          return game.i18n.localize(label);\r\n        });\r\n\r\n      // Ritual\r\n      if (components.ritual) {\r\n        componentsArray.push(`[${game.i18n.localize(\"DND5E.Ritual\")}]`);\r\n        info.text += ` [${game.i18n.localize(\"DND5E.RitualAbbr\")}]`;\r\n      }\r\n\r\n      info.title = componentsArray.join(\", \");\r\n\r\n      return info;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get valid actors\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    #getValidActors() {\r\n      const allowedTypes = [\"character\", \"npc\"];\r\n      return this.actors.every(actor => allowedTypes.includes(actor.type)) ? this.actors : [];\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get valid tokens\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    #getValidTokens() {\r\n      const allowedTypes = [\"character\", \"npc\"];\r\n      return this.actors.every(actor => allowedTypes.includes(actor.type)) ? this.tokens : [];\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get quantity\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {string}\r\n     */\r\n    #getQuantityData(item) {\r\n      const quantity = item?.system?.quantity ?? 0;\r\n      return {\r\n        text: (quantity > 1) ? quantity : \"\",\r\n        title: `${game.i18n.localize(\"DND5E.Quantity\")}: ${quantity}`\r\n      };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get uses\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {string}\r\n     */\r\n    #getUsesData(item) {\r\n      const uses = item?.system?.uses;\r\n      if (!(uses?.max > 0)) return {};\r\n      const per = uses.recovery[0]?.period === \"charges\" ? \"\" : ` ${game.i18n.localize(\"DND5E.per\")} `;\r\n      const period = CONFIG.DND5E.limitedUsePeriods[uses.recovery[0]?.period]?.label ?? uses.recovery[0]?.period;\r\n      const perPeriod = (period) ? `${per}${period}` : \"\";\r\n      const remainingUses = uses.max - (uses.spent ?? 0);\r\n      const text = `${remainingUses}/${uses.max}`;\r\n      const title = `${text}${perPeriod}`;\r\n      return { text, title };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get consume\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {string}\r\n     */\r\n    #getConsumeData(item) {\r\n      // Get consume target and type\r\n      const firstActivity = item?.system?.activities?.contents[0];\r\n      const firstTarget = firstActivity?.consumption?.targets?.[0];\r\n      const consumeId = firstTarget?.target;\r\n      const consumeType = firstTarget?.type;\r\n      const consumeAmount = firstTarget?.value;\r\n\r\n      if (!consumeId || !consumeType || consumeId === item.id) return {};\r\n\r\n      // Return resources\r\n      if (consumeType === \"attribute\") {\r\n        const parentId = consumeId.substr(0, consumeId.lastIndexOf(\".\"));\r\n        const target = foundry.utils.getProperty(this.actor.system, parentId);\r\n\r\n        if (target) {\r\n          const text = `${target.value ?? \"0\"}${target.max ? `/${target.max}` : \"\"}`;\r\n          return {\r\n            text,\r\n            title: `${text} ${target.label ?? \"\"}`\r\n          };\r\n        }\r\n      } else {\r\n        const target = this.actor.items?.get(consumeId);\r\n\r\n        // Return charges\r\n        if (target && consumeType === \"charges\") {\r\n          return this.#getUsesData(target);\r\n        }\r\n\r\n        // Return quantity\r\n        if (target?.system?.quantity) {\r\n          const text = `${consumeAmount > 1 ? `${consumeAmount} ${game.i18n.localize(\"DND5E.of\")} ` : \"\"}${target.system.quantity}`;\r\n          return {\r\n            text,\r\n            title: `${text} ${target.name}`\r\n          };\r\n        }\r\n      }\r\n\r\n      return {};\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Discard slow items\r\n     * @private\r\n     * @param {Map} items The items\r\n     * @returns {Map}     The filtered items\r\n     */\r\n    #discardSlowItems(items) {\r\n      // Return all items if slow actions are allowed\r\n      if (Utils.getSetting(\"showSlowActions\")) return items;\r\n\r\n      // Define slow activation types\r\n      const slowActivationTypes = new Set([\"minute\", \"hour\", \"day\"]);\r\n\r\n      // Filter out slow items and return the result\r\n      return new Map([...items.entries()].filter(([_, item]) => {\r\n        const activationType = item.system?.activation?.type;\r\n        return !slowActivationTypes.has(activationType);\r\n      }));\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get proficiency icon\r\n     * @param {string} level\r\n     * @returns {string}\r\n     */\r\n    #getProficiencyIcon(level) {\r\n      const title = CONFIG.DND5E.proficiencyLevels[level] ?? \"\";\r\n      const icon = PROFICIENCY_LEVEL_ICON[level];\r\n      return (icon) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : \"\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get icon for the activation type\r\n     * @private\r\n     * @param {object} activationType The activation type\r\n     * @returns {string}              The icon\r\n     */\r\n    #getActivationTypeIcon(activationType) {\r\n      const title = CONFIG.DND5E.abilityActivationTypes[activationType] ?? \"\";\r\n      const icon = ACTIVATION_TYPE[activationType]?.icon;\r\n      return (icon) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : \"\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get icon for concentration type\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {string}     The icon\r\n     */\r\n    #getConcentrationIcon(spell) {\r\n      if (spell?.type !== \"spell\" || !this.displaySpellInfo || !spell.system?.properties?.has(\"concentration\")) return null;\r\n      const title = game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\");\r\n      const icon = CONCENTRATION_ICON;\r\n      return `<dnd5e-icon src=\"${icon}\" title=\"${title}\">`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get icon for a prepared spell\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {string}     The icon\r\n     */\r\n    #getPreparedIcon(spell) {\r\n      if (spell?.type !== \"spell\" || !this.showUnpreparedSpells) return null;\r\n      const level = spell.system.level;\r\n      const preparationMode = spell.system.method;\r\n      const prepared = spell.system.prepared;\r\n      const icon = prepared ? PREPARED_ICON : `${PREPARED_ICON} tah-icon-disabled`;\r\n      const title = prepared === CONFIG.DND5E.spellPreparationStates.always.value ? game.i18n.localize(\"DND5E.SpellPrepAlways\") : prepared ? game.i18n.localize(\"DND5E.SpellPrepared\") : game.i18n.localize(\"DND5E.SpellUnprepared\");\r\n\r\n      // Return icon if the spellcasting method is 'spell' (prepared) or prepared is always and the spell is not a cantrip\r\n      return ((preparationMode === \"spell\" || prepared === CONFIG.DND5E.spellPreparationStates.always.value) && level !== 0) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : null;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    #getTooltipData(entity) {\r\n      if (this.tooltipsSetting === \"none\") return \"\";\r\n\r\n      const name = entity?.name ?? \"\";\r\n\r\n      if (this.tooltipsSetting === \"nameOnly\") return name;\r\n\r\n      const tooltip = {};\r\n      tooltip.content = `<section class=\"loading\" data-uuid=\"${entity.uuid}\"><i class=\"fas fa-spinner fa-spin-pulse\"></i></section>`;\r\n      tooltip.class = \"dnd5e2 dnd5e-tooltip item-tooltip\";\r\n\r\n      return tooltip;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get condition tooltip data\r\n     * @param {*} id     The condition id\r\n     * @param {*} name   The condition name\r\n     * @returns {object} The tooltip data\r\n     */\r\n    #getConditionTooltipData(id, name) {\r\n      if (this.tooltipsSetting === \"none\") return \"\";\r\n\r\n      const condition = CONFIG.DND5E.conditionTypes[id];\r\n\r\n      if (this.tooltipsSetting === \"nameOnly\" || !condition?.reference) return name;\r\n\r\n      const tooltip = {};\r\n      tooltip.content = `<section class=\"loading\" data-uuid=\"${condition.reference}\"><i class=\"fas fa-spinner fa-spin-pulse\"></i></section>`;\r\n      tooltip.class = \"dnd5e2 dnd5e-tooltip rule-tooltip\";\r\n\r\n      return tooltip;\r\n    }\r\n  };\r\n});\r\n","export let MagicItemActionHandlerExtender = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  MagicItemActionHandlerExtender = class MagicItemActionHandlerExtender extends coreModule.api.ActionHandlerExtender {\r\n    constructor(actionHandler) {\r\n      super();\r\n      this.actionHandler = actionHandler;\r\n      this.actor = null;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Extend the action list\r\n     */\r\n    async extendActionHandler() {\r\n      this.actor = this.actionHandler.actor;\r\n      if (!this.actor) return;\r\n\r\n      const actor = await MagicItems.actor(this.actor.id);\r\n\r\n      if (!actor) return;\r\n\r\n      const magicItems = actor.items ?? [];\r\n\r\n      if (magicItems.length === 0) return;\r\n\r\n      const parentGroupId = \"magic-items\";\r\n      const parentGroupType = \"system\";\r\n      const parentGroupData = {\r\n        id: parentGroupId,\r\n        type: parentGroupType\r\n      };\r\n\r\n      magicItems.forEach(magicItem => {\r\n        if (magicItem.attuned && !this._isItemAttuned(magicItem)) return;\r\n        if (magicItem.equipped && !this._isItemEquipped(magicItem)) return;\r\n\r\n        const groupId = `magic-items_${magicItem.id}`;\r\n        const groupName = magicItem.name;\r\n        const groupType = \"system-derived\";\r\n        const groupInfo1 = `${magicItem.uses}/${magicItem.charges}`;\r\n        const groupData = {\r\n          id: groupId,\r\n          name: groupName,\r\n          type: groupType,\r\n          info1: groupInfo1\r\n        };\r\n\r\n        // Add group to HUD\r\n        this.actionHandler.addGroup(groupData, parentGroupData);\r\n\r\n        const actions = magicItem.ownedEntries.map(entry => {\r\n          const effect = entry.item;\r\n          const id = effect.id;\r\n          const name = effect.name;\r\n          const img = coreModule.api.Utils.getImage(effect);\r\n          const info1 = effect.consumption;\r\n          const info2 = (effect.baseLevel) ? `${coreModule.api.Utils.i18n(\"DND5E.AbbreviationLevel\")} ${effect.baseLevel}` : \"\";\r\n          return {\r\n            id,\r\n            name,\r\n            encodedValue,\r\n            img,\r\n            info1,\r\n            info2,\r\n            selected: true,\r\n            system: { actionType: \"magicItem\", itemId: magicItem.id, effectId: id}\r\n          };\r\n        });\r\n\r\n        // Add actions to action list\r\n        this.actionHandler.addActions(actions, groupData);\r\n      });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Whether the magic item is equipped or not\r\n     * @param {object} magicItem The item\r\n     * @returns {boolean}\r\n     */\r\n    _isItemEquipped(magicItem) {\r\n      return magicItem.item.system.equipped;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Whether the magic items is attuned or not\r\n     * @param {object} magicItem The item\r\n     * @returns {boolean}\r\n     */\r\n    _isItemAttuned(magicItem) {\r\n      const attunement = magicItem.item.system.attunment;\r\n      const attunementRequired = CONFIG.DND5E.attunementTypes?.REQUIRED ?? 1;\r\n\r\n      if (attunement === attunementRequired) return false;\r\n\r\n      return true;\r\n    }\r\n  };\r\n});\r\n","import { CUSTOM_DND5E } from \"./constants.js\";\r\n\r\nexport let RollHandler = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\r\n    /**\r\n     * Handle action click\r\n     * @override\r\n     * @param {object} event\r\n     */\r\n    async handleActionClick(event) {\r\n      const { actionType, actionId } = this.action.system;\r\n\r\n      if (!this.actor) {\r\n        for (const token of coreModule.api.Utils.getControlledTokens()) {\r\n          const actor = token.actor;\r\n          await this.handleAction(event, actionType, actor, token, actionId);\r\n        }\r\n      } else {\r\n        await this.handleAction(event, actionType, this.actor, this.token, actionId);\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Handle action\r\n     * @private\r\n     * @param {object} event\r\n     * @param {string} actionType\r\n     * @param {object} actor\r\n     * @param {object} token\r\n     * @param {string} actionId\r\n     */\r\n    async handleAction(event, actionType, actor, token, actionId) {\r\n      switch (actionType) {\r\n        case \"ability\":\r\n          this.rollAbility(event, actor, actionId); break;\r\n        case \"check\":\r\n          this.rollAbilityCheck(event, actor, actionId); break;\r\n        case \"save\":\r\n          this.rollSavingThrow(event, actor, actionId); break;\r\n        case \"condition\":\r\n          if (!token) return;\r\n          await this.toggleCondition(actor, token, actionId); break;\r\n        case \"counter\":\r\n          await this.modifyCounter(event, actor); break;\r\n        case \"effect\":\r\n          await this.toggleEffect(actor, actionId); break;\r\n        case \"exhaustion\":\r\n          await this.modifyExhaustion(event, actor); break;\r\n        case \"feature\":\r\n        case \"item\":\r\n        case \"spell\":\r\n        case \"weapon\":\r\n          if (this.isRenderItem()) this.renderItem(actor, actionId);\r\n          else this.useItem(event, actor, actionId);\r\n          break;\r\n        case \"magicItem\":\r\n          await this.rollMagicItem(actor, actionId); break;\r\n        case \"skill\":\r\n          this.rollSkill(event, actor, actionId); break;\r\n        case \"utility\":\r\n          await this.performUtilityAction(event, actor, token, actionId); break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Counter\r\n     * @private\r\n     * @param {object} event The event\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyCounter(event, actor) {\r\n      switch (this.action?.system?.counterKey) {\r\n        case \"death-saves\":\r\n          this.rollDeathSave(event, actor); break;\r\n        case \"exhaustion\":\r\n          await this.modifyExhaustion(actor); break;\r\n        case \"inspiration\":\r\n          await this.modifyInspiration(actor); break;\r\n        default:\r\n          await this.modifyCustomCounter(actor); break;\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Exhaustion\r\n     * @private\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyExhaustion(actor) {\r\n      const currentExhaustion = actor.system.attributes.exhaustion;\r\n      const newExhaustion = currentExhaustion + (this.isRightClick ? -1 : 1);\r\n      if (newExhaustion >= 0 && newExhaustion !== currentExhaustion) {\r\n        actor.update({ \"system.attributes.exhaustion\": newExhaustion });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Inspiration\r\n     * @private\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyInspiration(actor) {\r\n      const update = !actor.system.attributes.inspiration;\r\n      actor.update({ \"system.attributes.inspiration\": update });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Custom Counter\r\n     * @private\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyCustomCounter(actor) {\r\n      const { counterKey, counterType } = this.action.system;\r\n\r\n      let value = actor.getFlag(CUSTOM_DND5E.ID, counterKey) || {};\r\n\r\n      const setFlag = async (key, currentValue, newValue) => {\r\n        if (newValue !== currentValue) {\r\n          await actor.setFlag(CUSTOM_DND5E.ID, key, newValue);\r\n        }\r\n      };\r\n\r\n      const adjustValue = (key, currentValue = 0, increment = 1) => {\r\n        const newValue = this.isRightClick ? Math.max(0, currentValue - increment) : currentValue + increment;\r\n        setFlag(key, currentValue, newValue);\r\n      };\r\n\r\n      switch (counterType) {\r\n        case \"checkbox\":\r\n          await setFlag(id, !value);\r\n          break;\r\n\r\n        case \"fraction\":\r\n          if (this.isRightClick || (value.max && value.value < value.max) || !value.max) {\r\n            adjustValue(`${id}.value`, value.value);\r\n          }\r\n          break;\r\n\r\n        case \"number\":\r\n          adjustValue(id, value);\r\n          break;\r\n\r\n        case \"successFailure\":\r\n          value.success = value?.success ?? 0;\r\n          value.failure = value?.failure ?? 0;\r\n          if (this.isCtrl) {\r\n            adjustValue(`${id}.failure`, value.failure);\r\n          } else {\r\n            adjustValue(`${id}.success`, value.success);\r\n          }\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Ability\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollAbility(event, actor, actionId) {\r\n      if (!actor.system?.abilities) return;\r\n      actor.rollAbility({ ability: actionId, event });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Saving Throw\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollSavingThrow(event, actor, actionId) {\r\n      if ( !actor.system?.abilities ) return;\r\n      if ( typeof actor.rollSavingThrow === \"function\" ) {\r\n        actor.rollSavingThrow({ ability: actionId, event });\r\n      } else {\r\n        actor.rollAbilitySave(actionId, { event });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Ability Check\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollAbilityCheck(event, actor, actionId) {\r\n      if ( !actor.system?.abilities ) return;\r\n      if ( typeof actor.rollAbilityCheck === \"function\" ) {\r\n        actor.rollAbilityCheck({ ability: actionId, event });\r\n      } else {\r\n        actor.rollAbilityTest(actionId, { event });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */Russe\r\n\r\n    /**\r\n     * Roll Death Save\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     */\r\n    rollDeathSave(event, actor) {\r\n      actor.rollDeathSave({ event });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Magic Item\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     */\r\n    async rollMagicItem(actor) {\r\n      const { itemId, effectId } = this.action.system;\r\n\r\n      const magicItemActor = await MagicItems.actor(actor.id);\r\n      if (!magicItemActor) return;\r\n\r\n      // Magicitems module 3.0.0 does not support Item5e#use\r\n      magicItemActor.roll(itemId, effectId);\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Skill\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollSkill(event, actor, actionId) {\r\n      if (!actor.system?.skills) return;\r\n      actor.rollSkill({ skill: actionId, event });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Use Item\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    useItem(event, actor, actionId) {\r\n      const item = coreModule.api.Utils.getItem(actor, actionId);\r\n\r\n      if (this.#needsRecharge(item)) {\r\n        item.rollRecharge();\r\n      } else {\r\n        item.use({ event, legacy: false });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Needs Recharge\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {boolean}\r\n     */\r\n    #needsRecharge(item) {\r\n      return (item?.system?.uses?.period === \"recharge\" && !(item?.system?.uses?.value > 0));\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Perform utility action\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {object} token    The token\r\n     * @param {string} actionId The action id\r\n     */\r\n    async performUtilityAction(event, actor, token, actionId) {\r\n      switch (actionId) {\r\n        case \"deathSave\":\r\n          this.rollDeathSave(event, actor); break;\r\n        case \"endTurn\":\r\n          if (!token || game.combat?.current?.tokenId !== token.id) break;\r\n          await game.combat?.nextTurn(); break;\r\n        case \"initiative\":\r\n          await this.rollInitiative(event, actor); break;\r\n        case \"inspiration\":\r\n          await this.modifyInspiration(actor); break;\r\n        case \"longRest\":\r\n          actor.longRest(); break;\r\n        case \"shortRest\":\r\n          actor.shortRest(); break;\r\n      }\r\n\r\n      // Update HUD\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Initiative\r\n     * @param {object} event The event\r\n     * @param {object} actor The actor\r\n     * @private\r\n     */\r\n    async rollInitiative(event, actor) {\r\n      if (!actor) return;\r\n      await actor.rollInitiativeDialog({ event });\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Toggle Condition\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     * @param {object} token    The token\r\n     * @param {string} actionId The action id\r\n     */\r\n    async toggleCondition(actor, token, actionId) {\r\n      if (!token) return;\r\n\r\n      const statusEffect = CONFIG.statusEffects.find(statusEffect => statusEffect.id === actionId);\r\n      const isConvenient = statusEffect?.flags?.[\"dfreds-convenient-effects\"]?.isConvenient\r\n        ?? actionId.startsWith(\"Convenient Effect\");\r\n\r\n      if (game.dfreds && isConvenient) {\r\n        const effectName = statusEffect.name ?? statusEffect.label;\r\n        await game.dfreds.effectInterface.toggleEffect(effectName, { overlay: !!this.isRightClick });\r\n      } else {\r\n        const condition = this.#findCondition(actionId);\r\n        if (!condition) return;\r\n\r\n        const effect = this.#findEffect(actor, actionId);\r\n        if (effect?.disabled) { await effect.delete(); }\r\n\r\n        await actor.toggleStatusEffect(condition.id, { overlay: !!this.isRightClick });\r\n      }\r\n\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Find condition\r\n     * @private\r\n     * @param {string} actionId The action id\r\n     * @returns {object}        The condition\r\n     */\r\n    #findCondition(actionId) {\r\n      return CONFIG.statusEffects.find(effect => effect.id === actionId);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Find effect\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     * @returns {object}        The effect\r\n     */\r\n    #findEffect(actor, actionId) {\r\n      return actor.effects.find(effect => effect.statuses.every(status => status === actionId));\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Toggle Effect\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    async toggleEffect(actor, actionId) {\r\n      const effect = actor.allApplicableEffects().find(effect => effect.id === actionId);\r\n      if (!effect) return;\r\n\r\n      if (this.isRightClick && !effect.transfer) {\r\n        await effect.delete();\r\n      } else {\r\n        await effect.update({ disabled: !effect.disabled });\r\n      }\r\n\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Handle action hover\r\n     * @override\r\n     * @param {object} event The event\r\n     */\r\n    async handleActionHover(event) {\r\n      const types = [\"feature\", \"item\", \"spell\", \"weapon\", \"magicItem\"];\r\n\r\n      if (!this.actor || !this.action?.system?.actionId) return;\r\n\r\n      const { actionType, actionId } = this.action.system;\r\n\r\n      if (!types.includes(actionType)) return;\r\n\r\n      const item = coreModule.api.Utils.getItem(this.actor, actionId);\r\n\r\n      if (this.isHover) {\r\n        Hooks.call(\"tokenActionHudSystemActionHoverOn\", event, item);\r\n      } else {\r\n        Hooks.call(\"tokenActionHudSystemActionHoverOff\", event, item);\r\n      }\r\n    }\r\n  };\r\n});\r\n","import { GROUP } from \"./constants.js\";\r\n\r\n/**\r\n * Default categories and groups\r\n */\r\nexport let DEFAULTS = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  const groups = GROUP;\r\n  Object.values(groups).forEach(group => {\r\n    group.name = coreModule.api.Utils.i18n(group.name);\r\n    group.listName = `Group: ${coreModule.api.Utils.i18n(group.name)}`;\r\n  });\r\n  const groupsArray = Object.values(groups);\r\n  DEFAULTS = {\r\n    layout: [\r\n      {\r\n        nestId: \"inventory\",\r\n        id: \"inventory\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Inventory\"),\r\n        groups: [\r\n          { ...groups.weapons, nestId: \"inventory_weapons\" },\r\n          { ...groups.equipment, nestId: \"inventory_equipment\" },\r\n          { ...groups.consumables, nestId: \"inventory_consumables\" },\r\n          { ...groups.tools, nestId: \"inventory_tools\" },\r\n          { ...groups.containers, nestId: \"inventory_containers\" },\r\n          { ...groups.loot, nestId: \"inventory_loot\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"features\",\r\n        id: \"features\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Features\"),\r\n        groups: [\r\n          { ...groups.activeFeatures, nestId: \"features_active-features\" },\r\n          { ...groups.passiveFeatures, nestId: \"features_passive-features\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"spells\",\r\n        id: \"spells\",\r\n        name: coreModule.api.Utils.i18n(\"TYPES.Item.spellPl\"),\r\n        groups: [\r\n          { ...groups.atWillSpells, nestId: \"spells_at-will-spells\" },\r\n          { ...groups.innateSpells, nestId: \"spells_innate-spells\" },\r\n          { ...groups.pactSpells, nestId: \"spells_pact-spells\" },\r\n          { ...groups.cantrips, nestId: \"spells_cantrips\" },\r\n          { ...groups._1stLevelSpells, nestId: \"spells_1st-level-spells\" },\r\n          { ...groups._2ndLevelSpells, nestId: \"spells_2nd-level-spells\" },\r\n          { ...groups._3rdLevelSpells, nestId: \"spells_3rd-level-spells\" },\r\n          { ...groups._4thLevelSpells, nestId: \"spells_4th-level-spells\" },\r\n          { ...groups._5thLevelSpells, nestId: \"spells_5th-level-spells\" },\r\n          { ...groups._6thLevelSpells, nestId: \"spells_6th-level-spells\" },\r\n          { ...groups._7thLevelSpells, nestId: \"spells_7th-level-spells\" },\r\n          { ...groups._8thLevelSpells, nestId: \"spells_8th-level-spells\" },\r\n          { ...groups._9thLevelSpells, nestId: \"spells_9th-level-spells\" },\r\n          { ...groups.additionalSpells, nestId: \"spells_additional-spells\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"attributes\",\r\n        id: \"attributes\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Attributes\"),\r\n        groups: [\r\n          { ...groups.abilities, nestId: \"attributes_abilities\" },\r\n          { ...groups.skills, nestId: \"attributes_skills\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"effects\",\r\n        id: \"effects\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Effects\"),\r\n        groups: [\r\n          { ...groups.temporaryEffects, nestId: \"effects_temporary-effects\" },\r\n          { ...groups.passiveEffects, nestId: \"effects_passive-effects\" },\r\n          { ...groups.conditions, nestId: \"effects_conditions\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"utility\",\r\n        id: \"utility\",\r\n        name: coreModule.api.Utils.i18n(\"tokenActionHud.utility\"),\r\n        groups: [\r\n          { ...groups.combat, nestId: \"utility_combat\" },\r\n          { ...groups.token, nestId: \"utility_token\" },\r\n          { ...groups.rests, nestId: \"utility_rests\" },\r\n          { ...groups.utility, nestId: \"utility_utility\" }\r\n        ]\r\n      }\r\n    ],\r\n    groups: groupsArray\r\n  };\r\n});\r\n","import { MODULE } from \"./constants.js\";\r\n\r\n/**\r\n *\r\n * @param updateFunc\r\n */\r\nexport function register(updateFunc) {\r\n  game.settings.register(MODULE.ID, \"abbreviateSkills\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.abbreviateSkills.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.abbreviateSkills.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showSlowActions\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showSlowActions.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showSlowActions.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: true,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"displaySpellInfo\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.displaySpellInfo.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.displaySpellInfo.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: true,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnchargedItems\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnchargedItems.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnchargedItems.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnequippedItems\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItems.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItems.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnequippedItemsNpcs\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItemsNpcs.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItemsNpcs.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: true,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnpreparedSpells\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnpreparedSpells.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnpreparedSpells.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showItemsWithoutActivationCosts\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showItemsWithoutActivationCosts.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showItemsWithoutActivationCosts.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n}\r\n","// System Module Imports\r\nimport { ActionHandler } from \"./action-handler.js\";\r\nimport { MagicItemActionHandlerExtender } from \"./magic-items-extender.js\";\r\nimport { RollHandler as Core } from \"./roll-handler.js\";\r\nimport { DEFAULTS } from \"./defaults.js\";\r\nimport * as systemSettings from \"./settings.js\";\r\n\r\nexport let SystemManager = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\r\n    /** @override */\r\n    getActionHandler() {\r\n      const actionHandler = new ActionHandler();\r\n      if (coreModule.api.Utils.isModuleActive(\"magic-items-2\")\r\n        || coreModule.api.Utils.isModuleActive(\"magicitems\")) {\r\n        actionHandler.addActionHandlerExtender(new MagicItemActionHandlerExtender(actionHandler));\r\n      }\r\n      return actionHandler;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    getAvailableRollHandlers() {\r\n      let coreTitle = \"Core D&D5e\";\r\n\r\n      if (coreModule.api.Utils.isModuleActive(\"midi-qol\")) {\r\n        coreTitle += ` [supports ${coreModule.api.Utils.getModuleTitle(\"midi-qol\")}]`;\r\n      }\r\n\r\n      const choices = { core: coreTitle };\r\n      return choices;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    getRollHandler(rollHandlerId) {\r\n      let rollHandler;\r\n      switch (rollHandlerId) {\r\n        case \"core\":\r\n        default:\r\n          rollHandler = new Core();\r\n          break;\r\n      }\r\n\r\n      return rollHandler;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    registerSettings(onChangeFunction) {\r\n      systemSettings.register(onChangeFunction);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    async registerDefaults() {\r\n      const defaults = DEFAULTS;\r\n      // If the 'Magic Items' module is active, then add a group for it\r\n      if (game.modules.get(\"magicitems\")?.active || game.modules.get(\"magic-items-2\")?.active) {\r\n        const name = coreModule.api.Utils.i18n(\"tokenActionHud.dnd5e.magicItems\");\r\n        defaults.groups.push(\r\n          {\r\n            id: \"magic-items\",\r\n            name,\r\n            listName: `Group: ${name}`,\r\n            type: \"system\"\r\n          }\r\n        );\r\n        defaults.groups.sort((a, b) => a.id.localeCompare(b.id));\r\n      }\r\n      return defaults;\r\n    }\r\n  };\r\n});\r\n","import { SystemManager } from \"./system-manager.js\";\r\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from \"./constants.js\";\r\n\r\nHooks.on(\"tokenActionHudCoreApiReady\", async () => {\r\n  const module = game.modules.get(MODULE.ID);\r\n  module.api = {\r\n    requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\r\n    SystemManager\r\n  };\r\n  Hooks.call(\"tokenActionHudSystemReady\", module);\r\n});\r\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","ability","check","condition","counter","effect","exhaustion","feature","item","save","skill","spell","utility","ACTIVATION_TYPE","action","group","bonus","icon","crew","day","hour","lair","minute","legendary","reaction","reactiondamage","reactionmanual","special","other","CONCENTRATION_ICON","CUSTOM_DND5E","COUNTERS","character","npc","FEATURE_GROUP_IDS","GROUP","_1stLevelSpells","id","name","spellMode","type","_2ndLevelSpells","_3rdLevelSpells","_4thLevelSpells","_5thLevelSpells","_6thLevelSpells","_7thLevelSpells","_8thLevelSpells","_9thLevelSpells","abilities","actions","activeFeatures","additionalSpells","artificerInfusions","atWillSpells","backgroundFeatures","bonusActions","cantrips","channelDivinity","checks","classFeatures","combat","conditions","consumables","containers","counters","crewActions","defensiveTactics","eldritchInvocations","elementalDisciplines","equipment","equipped","feats","fightingStyles","huntersPrey","innateSpells","kiAbilities","lairActions","legendaryActions","loot","maneuvers","metamagicOptions","monsterFeatures","multiattacks","otherActions","pactBoons","pactSpells","passiveEffects","passiveFeatures","psionicPowers","raceFeatures","reactions","rests","runes","saves","skills","superiorHuntersDefense","temporaryEffects","token","tools","unequipped","weapons","PREPARED_ICON","PROFICIENCY_LEVEL_ICON","RARITY","common","uncommon","rare","veryRare","artifact","RITUAL_ICON","SPELL_GROUP_IDS","Utils","Hooks","once","async","capitalize","value","replace","text","charAt","toUpperCase","substring","toLowerCase","getSetting","key","defaultValue","game","settings","get","coreModule","api","Logger","debug","setSetting","set","ActionHandler","featureActions","inventoryActions","spellActions","buildSystemActions","groupIds","this","actors","actor","getValidActors","tokens","getValidTokens","items","sortItemsByName","discardSlowItems","abbreviateSkills","displaySpellInfo","showItemsWithoutActivationCosts","showUnchargedItems","showUnequippedItems","showUnpreparedSpells","activationgroupIds","inventorygroupIds","buildCharacterActions","buildVehicleActions","buildMultipleTokenActions","Promise","all","buildConditions","buildEffects","buildFeatures","buildInventory","buildSpells","buildAbilities","buildCombat","buildCounters","buildExhaustion","buildRests","buildSkills","buildUtility","actionType","groupId","system","CONFIG","DND5E","length","Object","entries","filter","map","abilityId","label","abilitySaveValue","mod","icon1","getProficiencyIcon","proficient","info1","getModifier","title","i18n","localize","info2","listName","getListName","actionId","addActions","buildActivations","data","groupData","actionData","activationItems","Map","activationType","activities","contents","activation","has","values","groupDataClone","includes","defaultSelected","parentgroupData","addGroup","addGroupInfo","buildActions","combatType","initiative","current","tokenId","endTurn","getControlledTokens","tokenIds","combatants","combatant","getInfo1","class","cssClass","every","statusEffects","hasCondition","effects","some","statuses","status","disabled","img","getImage","tooltip","getConditionTooltipData","isModuleActive","keys","_","visible","active","attributes","death","success","failure","getFlag","max","counterKey","counterType","allApplicableEffects","size","statusEffectIds","Set","statusEffect","_id","effectId","isSuppressed","parent","identified","user","isGM","isTemporary","featuresMap","featureType","background","monster","race","classFeatureType","artificerInfusion","defensiveTactic","eldritchInvocation","elementalDiscipline","fightingStyle","ki","maneuver","metamagic","multiattack","pact","psionicPower","rune","subType","subtype","inventoryMap","quantity","isActiveItem","isUsableItem","isEquippedItem","shortRest","longRest","total","error","spells","spellsMap","isUsableSpell","linkedActivity","displayInSpellbook","method","level","systemSpells","reverse","spellSlotsMap","spellSlotAvailable","pactSlotAvailable","pactSlot","hasValue","hasMax","hasLevel","slotAvailable","startsWith","slotsAvailable","spellSlotModes","levelInfo","slots","info","utilityTypes","deathSave","inspiration","hp","utilityType","options","getAction","entity","hasOwn","getItemInfo","getTooltipData","getActivationTypeIcon","icon2","getPreparedIcon","icon3","getConcentrationIcon","info3","activationTypes","activityActivationTypes","uses","prepared","actionName","getSpellInfo","getQuantityData","getUsesData","getConsumeData","components","properties","componentsArray","vocal","somatic","material","ritual","push","join","allowedTypes","per","recovery","period","limitedUsePeriods","perPeriod","spent","firstActivity","firstTarget","consumption","targets","consumeId","target","consumeType","consumeAmount","parentId","substr","lastIndexOf","foundry","utils","getProperty","slowActivationTypes","proficiencyLevels","abilityActivationTypes","preparationMode","spellPreparationStates","always","tooltipsSetting","content","uuid","conditionTypes","reference","MagicItemActionHandlerExtender","ActionHandlerExtender","constructor","actionHandler","super","extendActionHandler","MagicItems","magicItems","parentGroupData","forEach","magicItem","attuned","_isItemAttuned","_isItemEquipped","charges","ownedEntries","entry","baseLevel","encodedValue","selected","itemId","attunment","attunementTypes","REQUIRED","RollHandler","handleActionClick","event","handleAction","rollAbility","rollAbilityCheck","rollSavingThrow","toggleCondition","modifyCounter","toggleEffect","modifyExhaustion","isRenderItem","renderItem","useItem","rollMagicItem","rollSkill","performUtilityAction","rollDeathSave","modifyInspiration","modifyCustomCounter","currentExhaustion","newExhaustion","isRightClick","update","setFlag","currentValue","newValue","adjustValue","increment","Math","isCtrl","rollAbilitySave","rollAbilityTest","Russe","magicItemActor","roll","callAll","getItem","needsRecharge","rollRecharge","use","legacy","nextTurn","rollInitiative","rollInitiativeDialog","find","isConvenient","flags","dfreds","effectName","effectInterface","overlay","findCondition","findEffect","delete","toggleStatusEffect","transfer","handleActionHover","isHover","call","DEFAULTS","register","updateFunc","hint","scope","config","Boolean","default","onChange","groups","groupsArray","layout","nestId","SystemManager","getActionHandler","addActionHandlerExtender","getAvailableRollHandlers","coreTitle","getModuleTitle","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","onChangeFunction","systemSettings.register","registerDefaults","defaults","modules","sort","a","b","localeCompare","on","module","requiredCoreModuleVersion"],"mappings":"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"}